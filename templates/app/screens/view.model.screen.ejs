import React from 'react';
import {
  Image,
  Platform,
  InputText,
  ScrollView,
  Picker,
  FlatList,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
  ActivityIndicator
} from 'react-native';
import { WebBrowser } from 'expo';
import i18n from '../i18n'
import { TabNavigator } from 'react-navigation';
import { MonoText } from '../components/StyledText';

import Item from '../components/Item'
import Post from '../components/Post'
import PrimaryButton from '../components/Primarybutton'
import Background from '../components/Background'

import gql from 'graphql-tag'
import { graphql } from 'react-apollo'

import styles from '../styles'
import { TextInput } from 'react-native-gesture-handler';

let getQuery = gql`
    query <%=singular%>($id: String!) {
        <%=singular%>(id: $id) {
            id
            <% for (field of fields) {%>,
            <%=id%> <% if (model} {%> {
                id,
                name
            }<%= } %>
            <%= } %>
            <% for (relation of relations) {%>,
            <%=relation.id%>Set {
               id,
               name
            }
            <%= } %>
        }
    }
`

let postQuery = gql`
    mutation create<%=name%>(
        $id: String!<% for (field of fields) {%>, 
        $<%=id%>=: <%=type%>! 
       <%= } %> <% for (relation of relations) {%>,
                $<%=relation.id%>Id: String!<% } %>) {
            create<%=name%>(
                id: $id<%for (let field of fields) {%>, 
                <%=singular%>: $<%=singular%> <% } %>,
                $<%=id%>Id: <%=id%><% } %>
            ) {
                id
                <% for (let field of field) {%>,
                <%=field.id%>
                <% } %>
            }
        }
    }
`

let updateQuery = gql`
    mutation update<%=name%>(
        $id: String!<% for (let field of fields) %>, 
        $<%=id%>: String!
        <% } %> <% for (let relation of relations) { %>,
                $<%=relation.id%>Id: String!<% } %>) {
            update<%=name%>(
                id: $id<% for (let field of fields) {%>, 
                <%=field.id%>: $<%=id%>
            <% } %>) {
                id<% for (let field of fields) {%>,
                <%=id%>
                <% } %>
            }
        }
    }
`

let deleteQuery = gql`
    mutation delete<%=name%>(
        $id: String!) {
            delete<%=name%>(id: $id) {
                status
            }
        }
    }
`

<% for (let relation of relations) {%>
class <%=relation.name%>Tab extends React.Component {
    constructor(props) {
        super(props)
    }
    render() {
        return (
            <View>
                <FlatList
                style={{height: '100%'}}
                keyExtractor={(item, i) => item.id}
                data={this.props.data.<%=relation.plural%>}
                renderItem={({item, i}) => (
                <Item
                    id={item.id}
                    onPress={(id) => {
                        this.props.navigation.navigate('<%=relation.name%>', {id: id})
                        console.log(id)
                    }}
                    name={item.name} 
                    description={item.description} 
                    time={item.time} />
            )} /> 
            </View>
        )
    }
}
<% } %>

class Overview extends React.Component {
  static navigationOptions = {
     title: i18n.t('<%=plural%>')
  };
  constructor(props) {
      super(props)
      this._onSavePress = this._onSavePress.bind(this)
  }
    componentWillReceiveProps(newProps){
        if(!newProps.query.loading){
            this.setState({data: newProps.data})
        }
    }
  _onSavePress(e) {
      this.props.mutate({
          query: updateQuery,
          variables: {
              ...this.state.data.<%=singular%>
          }
      })
  }

  state = {
      data: {
          {{singular}}: {
            a:''<% for (let field of fields) {%>,<%=field.id}%>: ''
            <% } %>
        }
      }
  }

  render() {
    if (!this.props.data || this.props.data.error) {
        console.log(this.props.data)
        return (
            <View style={{alignItems: 'center', flex: 1, justifyContent: 'center'}}>
                <Text>An error occured. Please try again soon</Text>
            </View>
          )
    }
    
    if (this.props.data.loading) {
          return (
            <View style={{alignItems: 'center', flex: 1, justifyContent: 'center'}}>
                <ActivityIndicator />
            </View>
          )
    }
   
    return (
      <View style={[styles.container, {height: '100%'}]}>
        <% for (let field of fields) { %>
        
        <TextInput
            value={({{id}}) => this.setState({ <%=singular%>: { <%=id%> } })} />
        <% } %>
        <% for (let relation of relations) {%>
        <Picker 
            selectedValue={this.state.<%=relation.singular%>.<%=relation.id%></Picker>}
            onValueChange={({itemValue, itemIndex}) => this.setState({ <%=relation.singular%>: <%=relation.id%>: itemValue})}
            {this.props.data.<%=relation.plural%>.map((o, i) => {
                return <Picker.Item label={o.name} value={o.value} />
            })}
        </Picker>
        <% } %>
        <PrimaryButton onPress={this._onSavePress}>{i18n.t('save')}</PrimaryButton>
      </View>
    );
  }
}

let OverviewScreen = compose(
    
    graphql(getQuery, {
        options: (ownProps) => ({
            variables: {
                id: ownProps.navigation.state.params.id
            }
        }),
        props: ({ data: { loading, <%=singular%> } }) => ({
            data, <%=singular%>
        }),
        name: 'get'
    }){{#list relations}},
    graphql({{id}})Query, {
        props: ({ data: { loading, <%=plural%> } }) => ({
            loading, <%=plural%>
        }),
        name: 'get<%=plural%>'
    }){{/list}}
)(Overview)

export default TabNavigator(
    {
        Overview: { 
            screen: OverviewScreen
        }<% for (let relation of relations) {%>,
        <%=relation.name%>: {
            screen: <%=relation.name%>Tab
        }<% } %>
    }
)